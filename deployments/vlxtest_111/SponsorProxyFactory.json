{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "SponsorCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract Sponsor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deployMinimal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instance",
      "outputs": [
        {
          "internalType": "contract Sponsor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x0E97a61Eca9048bFABFe663727fb759474264277",
    "contractAddress": "0xE52af7130eEb62e779ff0fDb601671c4A1566e1B",
    "transactionIndex": 0,
    "gasUsed": "1667219",
    "logsBloom": "0x
    "blockHash": "0x05f5677f37408f811149dda9180cdb2e34f5335cf8604691e8f60a6743816378",
    "transactionHash": "0x7bdb9415d6fddeafd4771e41dc2db34dfb857f2d2da77c4dad2ce85f0a90daa9",
    "logs": [],
    "blockNumber": 2407692,
    "cumulativeGasUsed": "1667219",
    "status": 1,
    "byzantium": true
  },
  "address": "0xE52af7130eEb62e779ff0fDb601671c4A1566e1B",
  "args": [],
  "solcInputHash": "0xd053d84b6950d77fd597492fc37dc33d2e0b447b6c34e928c29f083e8164a002",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"SponsorCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract Sponsor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instance\",\"outputs\":[{\"internalType\":\"contract Sponsor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create()\":{\"returns\":{\"_0\":\"sponsor A reference to the new proxied sponsor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Initializes the Factory with an instance of the sponsor\",\"create()\":{\"notice\":\"Creates a new sponsor as a proxy of the template instance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sponsor/SponsorProxyFactory.sol\":\"SponsorProxyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x571028e27d301916b4d956f9f6442a57203a3a43bda705fa8db7e23010d4c136\"},\"contracts/interface/IBPool.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IBPool {\\n  function isBound(address t) external view returns (bool);\\n\\n  function joinswapExternAmountIn(\\n    address tokenIn,\\n    uint256 tokenAmountIn,\\n    uint256 minPoolAmountOut\\n  ) external returns (uint256 poolAmountOut);\\n\\n  function joinswapWTokenIn(uint256 minPoolAmountOut)\\n    external\\n    payable\\n    returns (uint256 poolAmountOut);\\n\\n  function exitswapPoolAmountIn(\\n    address tokenOut,\\n    uint256 poolAmountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256 tokenAmountOut);\\n}\\n\",\"keccak256\":\"0xf8bb5d1e8e8fca24ccde9f2c0a85e53cbf2ea9f2a75e4f051c73782b48cc7a0f\"},\"contracts/interface/IRewardManager.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface IRewardManager {\\n  function userInfo(uint256 _pid, address account) external view returns (uint256, uint256);\\n\\n  function deposit(uint256 _pid, uint256 _amount) external returns (uint256);\\n\\n  function withdraw(uint256 _pid, uint256 _amount) external returns (uint256);\\n\\n  function getReward(uint256 _pid) external returns (uint256);\\n\\n  function pendingSyx(uint256 _pid, address account) external view returns (uint256);\\n\\n  function syx() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6ad42cd806282330890d3f94c6938c292d16174262faa35e16a5db0a68028c4c\"},\"contracts/interface/ISyxPrizePool.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\ninterface ISyxPrizePool {\\n  function depositVlxTo(\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x622da67ad826d251a16329d3123d157aeff43fff88adda1e4fca7ea4d2c9d841\"},\"contracts/sponsor/Sponsor.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport '@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\n\\nimport '../interface/IRewardManager.sol';\\nimport '../interface/IBPool.sol';\\nimport '../interface/ISyxPrizePool.sol';\\n\\ncontract Sponsor is Initializable, OwnableUpgradeSafe {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public ticket;\\n  ISyxPrizePool public prizePool;\\n  IRewardManager public rewardManager;\\n  uint8 public rewardPoolId;\\n  address public lpToken; //bpt\\n\\n  event LogDeposit(address indexed dst, uint256 amount);\\n  event LogWithdrawal(address indexed src, uint256 amount);\\n  event LogStake(address indexed dst, uint256 amount);\\n  event LogUnstake(address indexed src, uint256 amount);\\n  event LogReward(address indexed src, uint256 amount);\\n\\n  function initialize(\\n    address _prizePool,\\n    address _ticket,\\n    address _lpToken,\\n    address _rewardManager,\\n    uint8 _rewardPoolId\\n  ) public initializer {\\n    __Ownable_init();\\n    lpToken = _lpToken;\\n    prizePool = ISyxPrizePool(uint160(_prizePool));\\n    ticket = _ticket;\\n    rewardManager = IRewardManager(_rewardManager);\\n    rewardPoolId = _rewardPoolId;\\n  }\\n\\n  modifier validBpt(address token) {\\n    require(IBPool(lpToken).isBound(token), 'Sponsor/invalid-token');\\n    _;\\n  }\\n\\n  receive() external payable {\\n    // prizePool.depositVlxTo{ value: balance }(address(this), balance, ticket, address(0));\\n    depositAndStake(0);\\n  }\\n\\n  function balanceOfLpToken() external view returns (uint256) {\\n    (uint256 amount, ) = rewardManager.userInfo(uint256(rewardPoolId), address(this));\\n    return amount;\\n  }\\n\\n  function earned() external view returns (uint256) {\\n    return rewardManager.pendingSyx(uint256(rewardPoolId), address(this));\\n  }\\n\\n  function claimRewards() external {\\n    IERC20 syx = IERC20(rewardManager.syx());\\n    rewardManager.getReward(uint256(rewardPoolId));\\n\\n    uint256 syxAmount = syx.balanceOf(address(this));\\n\\n    syx.safeTransfer(address(prizePool), syxAmount);\\n\\n    emit LogReward(address(prizePool), syxAmount);\\n  }\\n\\n  /**\\n   * @dev Don't need to check onlyOwner as the caller needs to check that\\n   */\\n  function stakeLpToken(uint256 amount) internal {\\n    IERC20 syx = IERC20(rewardManager.syx());\\n    (uint256 currBalance, ) = rewardManager.userInfo(uint256(rewardPoolId), address(this));\\n    if (IERC20(lpToken).allowance(address(this), address(rewardManager)) < amount) {\\n      IERC20(lpToken).approve(address(rewardManager), amount);\\n    }\\n    uint256 newBalance = rewardManager.deposit(uint256(rewardPoolId), amount);\\n    require(newBalance - currBalance == amount, 'ERR_STAKE_REWARD');\\n    uint256 syxAmount = syx.balanceOf(address(this));\\n    syx.safeTransfer(address(prizePool), syxAmount);\\n\\n    emit LogReward(address(prizePool), syxAmount);\\n    emit LogStake(msg.sender, newBalance);\\n  }\\n\\n  /**\\n   * @dev Don't need to check onlyOwner as the caller needs to check that\\n   */\\n  function unstakeLpToken(uint256 lpTokenAmount) internal {\\n    IERC20 syx = IERC20(rewardManager.syx());\\n    (uint256 currBalance, ) = rewardManager.userInfo(uint256(rewardPoolId), address(this));\\n    require(currBalance >= lpTokenAmount, 'ERR_NOT_ENOUGH_BAL');\\n\\n    uint256 newBalance = rewardManager.withdraw(uint256(rewardPoolId), lpTokenAmount);\\n\\n    require(currBalance - newBalance == lpTokenAmount, 'ERR_UNSTAKE_REWARD');\\n\\n    uint256 syxAmount = syx.balanceOf(address(this));\\n    syx.safeTransfer(address(prizePool), syxAmount);\\n\\n    emit LogReward(address(prizePool), syxAmount);\\n    emit LogUnstake(msg.sender, lpTokenAmount);\\n  }\\n\\n  // /**\\n  //  * @dev Deposit first to the liquidity pool and then the reward pool to earn rewards\\n  //  * @param tokenIn ERC20 address to deposit\\n  //  * @param tokenAmountIn deposit amount, in wei\\n  //  */\\n  // function deposit(\\n  //   address tokenIn,\\n  //   uint256 tokenAmountIn,\\n  //   uint256 minPoolAmountOut\\n  // ) external validBpt(tokenIn) returns (uint256) {\\n  //   IERC20 tokenDeposit = IERC20(tokenIn);\\n  //   require(tokenDeposit.allowance(msg.sender, address(this)) >= tokenAmountIn, 'ERR_ALLOWANCE');\\n  //   // transfer the tokens here\\n  //   tokenDeposit.safeTransferFrom(msg.sender, address(this), tokenAmountIn);\\n  //   return depositAll(tokenIn, minPoolAmountOut);\\n  // }\\n\\n//   function depositAll(address tokenIn, uint256 minPoolAmountOut)\\n//     public\\n//     validBpt(tokenIn)\\n//     returns (uint256 poolAmountOut)\\n//   {\\n//     IERC20 tokenDeposit = IERC20(tokenIn);\\n//     // deposit to the bpool\\n//     uint256 balance = tokenDeposit.balanceOf(address(this));\\n//     if (tokenDeposit.allowance(address(this), lpToken) < balance) {\\n//       tokenDeposit.approve(lpToken, balance);\\n//     }\\n//     poolAmountOut = IBPool(lpToken).joinswapExternAmountIn(tokenIn, balance, minPoolAmountOut);\\n//     require(poolAmountOut > 0, 'ERR_BPOOL_DEPOSIT');\\n\\n//     // stake to RewardManager\\n//     stakeLpToken(poolAmountOut);\\n\\n//     emit LogDeposit(msg.sender, poolAmountOut);\\n//   }\\n\\n    function depositAndStake(uint256 minPoolAmountOut) public payable returns (uint256 poolAmountOut)\\n    {\\n        poolAmountOut = IBPool(lpToken).joinswapWTokenIn{value: address(this).balance}(\\n            minPoolAmountOut\\n        );\\n        require(poolAmountOut > 0, \\\"ERR_BPOOL_DEPOSIT\\\");\\n        // stake to RewardManager\\n        stakeLpToken(poolAmountOut);\\n\\n        emit LogDeposit(msg.sender, poolAmountOut);\\n    }\\n\\n  /**\\n   * @dev Unstake from the reward pool, then withdraw from the liquidity pool\\n   * @param tokenOut withdraw token address\\n   * @param amount withdraw amount, in wei\\n   */\\n  function withdraw(\\n    address tokenOut,\\n    uint256 amount,\\n    uint256 minAmountOut\\n  ) external validBpt(tokenOut) onlyOwner returns (uint256 tokenAmountOut) {\\n    // Withdraw the liquidity pool tokens from RewardManager\\n    unstakeLpToken(amount);\\n\\n    // Remove liquidity from the bpool\\n    tokenAmountOut = IBPool(lpToken).exitswapPoolAmountIn(tokenOut, amount, minAmountOut);\\n    IERC20(tokenOut).safeTransfer(address(prizePool), tokenAmountOut);\\n\\n    emit LogWithdrawal(tokenOut, tokenAmountOut);\\n  }\\n}\\n\",\"keccak256\":\"0xa11af31f476a7eb1c482e859d20166bc320bf65d210936b937fc239bf0a432bf\"},\"contracts/sponsor/SponsorProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport './Sponsor.sol';\\nimport '../external/openzeppelin/ProxyFactory.sol';\\n\\ncontract SponsorProxyFactory is ProxyFactory {\\n  Sponsor public instance;\\n\\n  event SponsorCreated(address sender, address sponsor);\\n\\n  /// @notice Initializes the Factory with an instance of the sponsor\\n  constructor() public {\\n    instance = new Sponsor();\\n  }\\n\\n  /// @notice Creates a new sponsor as a proxy of the template instance\\n  /// @return sponsor A reference to the new proxied sponsor\\n  function create() external returns (Sponsor) {\\n    Sponsor sponsor = Sponsor(uint160(deployMinimal(address(instance), '')));\\n    emit SponsorCreated(msg.sender, address(sponsor));\\n    return sponsor;\\n  }\\n}\\n\",\"keccak256\":\"0x1e1dc1ec968814c75092e09a9e8b832e585dcddbc66a26eb8bbb686c182166b4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b6118d0806103fc83390190565b6103818061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e21461006a578063efc81a8c14610120575b600080fd5b61004e610128565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603604081101561008057600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ab57600080fd5b8201836020820111156100bd57600080fd5b803590602001918460018302840111640100000000831117156100df57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610137945050505050565b61004e6102b3565b6000546001600160a01b031681565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0604080516001600160a01b038316815290519194507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349925081900360200190a18251156102ac576000826001600160a01b0316846040518082805190602001908083835b602083106102035780518252601f1990920191602091820191016101e4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102aa5760405162461bcd60e51b81526004018080602001828103825260248152602001806103286024913960400191505060405180910390fd5b505b5092915050565b60008054604080516020810190915282815282916102dc916001600160a01b0390911690610137565b604080513381526001600160a01b038316602082015281519293507f9ab0a0f620347c84a9fac8819b8b835eac3de8548d7137e8d52a8eedfa6d5a8b929081900390910190a190509056fe50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d6661696c6564a264697066735822122063eec39e1e0be176edae1e7f65d50e7ac69b8e18f498e7941cd3d83d283b958064736f6c634300060c0033608060405234801561001057600080fd5b506118b0806100206000396000f3fe6080604052600436106100e05760003560e01c8063719ce73e1161007f578063b5c5f67211610059578063b5c5f67214610259578063c1d1005214610298578063d6f19262146102ad578063f2fde38b146102c2576100f2565b8063719ce73e146102045780638da5cb5b1461021957806396205de61461022e576100f2565b806359fe8539116100bb57806359fe8539146101965780635fcbd285146101c55780636cc25db7146101da578063715018a6146101ef576100f2565b80628c2676146100f75780630f4ef8a614610150578063372500ab14610181576100f2565b366100f2576100ef60006102f5565b50005b600080fd5b34801561010357600080fd5b5061014e600480360360a081101561011a57600080fd5b5080356001600160a01b0390811691602081013582169160408201358116916060810135909116906080013560ff166103fe565b005b34801561015c57600080fd5b50610165610509565b604080516001600160a01b039092168252519081900360200190f35b34801561018d57600080fd5b5061014e610518565b6101b3600480360360208110156101ac57600080fd5b50356102f5565b60408051918252519081900360200190f35b3480156101d157600080fd5b506101656106e7565b3480156101e657600080fd5b506101656106f6565b3480156101fb57600080fd5b5061014e610705565b34801561021057600080fd5b506101656107b9565b34801561022557600080fd5b506101656107c8565b34801561023a57600080fd5b506102436107d7565b6040805160ff9092168252519081900360200190f35b34801561026557600080fd5b506101b36004803603606081101561027c57600080fd5b506001600160a01b0381351690602081013590604001356107e7565b3480156102a457600080fd5b506101b3610a0b565b3480156102b957600080fd5b506101b3610a97565b3480156102ce57600080fd5b5061014e600480360360208110156102e557600080fd5b50356001600160a01b0316610b22565b609a546040805163027af00f60e01b81526004810184905290516000926001600160a01b03169163027af00f91479160248082019260209290919082900301818588803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b50505050506040513d602081101561037057600080fd5b50519050806103ba576040805162461bcd60e51b815260206004820152601160248201527011549497d09413d3d317d1115413d4d255607a1b604482015290519081900360640190fd5b6103c381610c2d565b60408051828152905133917f1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198919081900360200190a2919050565b600054610100900460ff16806104175750610417611024565b80610425575060005460ff16155b6104605760405162461bcd60e51b815260040180806020018281038252602e815260200180611823602e913960400191505060405180910390fd5b600054610100900460ff1615801561048b576000805460ff1961ff0019909116610100171660011790555b61049361102a565b609a80546001600160a01b038087166001600160a01b03199283161790925560988054898416908316179055609780548884169083161790556099805460ff8616600160a01b0260ff60a01b199488169190931617929092161790558015610501576000805461ff00191690555b505050505050565b6099546001600160a01b031681565b609954604080516396d76c7160e01b815290516000926001600160a01b0316916396d76c71916004808301926020929190829003018186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d602081101561058757600080fd5b505160995460408051631c4b774b60e01b815260ff600160a01b840416600482015290519293506001600160a01b0390911691631c4b774b916024808201926020929091908290030181600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050506040513d602081101561060c57600080fd5b5050604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d602081101561068257600080fd5b50516098549091506106a1906001600160a01b038481169116836110dc565b6098546040805183815290516001600160a01b03909216917fd74de5239e3ba2828701358ebe17da3a8d632fc23e2839342b2c296060c8cf719181900360200190a25050565b609a546001600160a01b031681565b6097546001600160a01b031681565b61070d611133565b6065546001600160a01b0390811691161461076f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6098546001600160a01b031681565b6065546001600160a01b031690565b609954600160a01b900460ff1681565b609a5460408051630bcded8960e21b81526001600160a01b038087166004830152915160009387931691632f37b624916024808301926020929190829003018186803b15801561083657600080fd5b505afa15801561084a573d6000803e3d6000fd5b505050506040513d602081101561086057600080fd5b50516108ab576040805162461bcd60e51b815260206004820152601560248201527429b837b739b7b917b4b73b30b634b216ba37b5b2b760591b604482015290519081900360640190fd5b6108b3611133565b6065546001600160a01b03908116911614610915576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61091e84611137565b609a54604080516346ab38f160e01b81526001600160a01b0388811660048301526024820188905260448201879052915191909216916346ab38f19160648083019260209291908290030181600087803b15801561097b57600080fd5b505af115801561098f573d6000803e3d6000fd5b505050506040513d60208110156109a557600080fd5b50516098549092506109c4906001600160a01b038781169116846110dc565b6040805183815290516001600160a01b038716917fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91919081900360200190a2509392505050565b609954604080516393f1a40b60e01b815260ff600160a01b8404166004820152306024820152815160009384936001600160a01b03909116926393f1a40b9260448083019392829003018186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d6040811015610a8f57600080fd5b505191505090565b60995460408051632647c80360e11b815260ff600160a01b840416600482015230602482015290516000926001600160a01b031691634c8f9006916044808301926020929190829003018186803b158015610af157600080fd5b505afa158015610b05573d6000803e3d6000fd5b505050506040513d6020811015610b1b57600080fd5b5051905090565b610b2a611133565b6065546001600160a01b03908116911614610b8c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610bd15760405162461bcd60e51b81526004018080602001828103825260268152602001806117fd6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b609954604080516396d76c7160e01b815290516000926001600160a01b0316916396d76c71916004808301926020929190829003018186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d6020811015610c9c57600080fd5b5051609954604080516393f1a40b60e01b815260ff600160a01b840416600482015230602482015281519394506000936001600160a01b03909316926393f1a40b92604480840193919291829003018186803b158015610cfb57600080fd5b505afa158015610d0f573d6000803e3d6000fd5b505050506040513d6040811015610d2557600080fd5b5051609a5460995460408051636eb1769f60e11b81523060048201526001600160a01b03928316602482015290519394508693919092169163dd62ed3e916044808301926020929190829003018186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d6020811015610dac57600080fd5b50511015610e3a57609a546099546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018790529051919092169163095ea7b39160448083019260209291908290030181600087803b158015610e0d57600080fd5b505af1158015610e21573d6000803e3d6000fd5b505050506040513d6020811015610e3757600080fd5b50505b60995460408051631c57762b60e31b815260ff600160a01b84041660048201526024810186905290516000926001600160a01b03169163e2bbb15891604480830192602092919082900301818787803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050506040513d6020811015610ec057600080fd5b505190508181038414610f0d576040805162461bcd60e51b815260206004820152601060248201526f11549497d4d51052d157d49155d0549160821b604482015290519081900360640190fd5b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f5c57600080fd5b505afa158015610f70573d6000803e3d6000fd5b505050506040513d6020811015610f8657600080fd5b5051609854909150610fa5906001600160a01b038681169116836110dc565b6098546040805183815290516001600160a01b03909216917fd74de5239e3ba2828701358ebe17da3a8d632fc23e2839342b2c296060c8cf719181900360200190a260408051838152905133917f3dbdcfd4c1f2e08931aae3d544e149a1e643143f5234d166fe3debb783388495919081900360200190a25050505050565b303b1590565b600054610100900460ff16806110435750611043611024565b80611051575060005460ff16155b61108c5760405162461bcd60e51b815260040180806020018281038252602e815260200180611823602e913960400191505060405180910390fd5b600054610100900460ff161580156110b7576000805460ff1961ff0019909116610100171660011790555b6110bf611469565b6110c7611509565b80156110d9576000805461ff00191690555b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261112e908490611602565b505050565b3390565b609954604080516396d76c7160e01b815290516000926001600160a01b0316916396d76c71916004808301926020929190829003018186803b15801561117c57600080fd5b505afa158015611190573d6000803e3d6000fd5b505050506040513d60208110156111a657600080fd5b5051609954604080516393f1a40b60e01b815260ff600160a01b840416600482015230602482015281519394506000936001600160a01b03909316926393f1a40b92604480840193919291829003018186803b15801561120557600080fd5b505afa158015611219573d6000803e3d6000fd5b505050506040513d604081101561122f57600080fd5b505190508281101561127d576040805162461bcd60e51b815260206004820152601260248201527111549497d393d517d15393d551d217d0905360721b604482015290519081900360640190fd5b60995460408051630441a3e760e41b815260ff600160a01b84041660048201526024810186905290516000926001600160a01b03169163441a3e7091604480830192602092919082900301818787803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b505050506040513d602081101561130357600080fd5b505190508082038414611352576040805162461bcd60e51b815260206004820152601260248201527111549497d55394d51052d157d49155d0549160721b604482015290519081900360640190fd5b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113a157600080fd5b505afa1580156113b5573d6000803e3d6000fd5b505050506040513d60208110156113cb57600080fd5b50516098549091506113ea906001600160a01b038681169116836110dc565b6098546040805183815290516001600160a01b03909216917fd74de5239e3ba2828701358ebe17da3a8d632fc23e2839342b2c296060c8cf719181900360200190a260408051868152905133917faf14da4c9c7eeb91ef462950405340d31988005c789d867d3a1394f082105e89919081900360200190a25050505050565b600054610100900460ff16806114825750611482611024565b80611490575060005460ff16155b6114cb5760405162461bcd60e51b815260040180806020018281038252602e815260200180611823602e913960400191505060405180910390fd5b600054610100900460ff161580156110c7576000805460ff1961ff00199091166101001716600117905580156110d9576000805461ff001916905550565b600054610100900460ff16806115225750611522611024565b80611530575060005460ff16155b61156b5760405162461bcd60e51b815260040180806020018281038252602e815260200180611823602e913960400191505060405180910390fd5b600054610100900460ff16158015611596576000805460ff1961ff0019909116610100171660011790555b60006115a0611133565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156110d9576000805461ff001916905550565b611614826001600160a01b03166117c0565b611665576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106116a35780518252601f199092019160209182019101611684565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611705576040519150601f19603f3d011682016040523d82523d6000602084013e61170a565b606091505b509150915081611761576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156117ba5780806020019051602081101561177d57600080fd5b50516117ba5760405162461bcd60e51b815260040180806020018281038252602a815260200180611851602a913960400191505060405180910390fd5b50505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906117f457508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203f4ac7cb98eca2293e5a5ad91e912653652e387ffe794cdff545c6356837441f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e21461006a578063efc81a8c14610120575b600080fd5b61004e610128565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603604081101561008057600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ab57600080fd5b8201836020820111156100bd57600080fd5b803590602001918460018302840111640100000000831117156100df57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610137945050505050565b61004e6102b3565b6000546001600160a01b031681565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0604080516001600160a01b038316815290519194507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349925081900360200190a18251156102ac576000826001600160a01b0316846040518082805190602001908083835b602083106102035780518252601f1990920191602091820191016101e4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102aa5760405162461bcd60e51b81526004018080602001828103825260248152602001806103286024913960400191505060405180910390fd5b505b5092915050565b60008054604080516020810190915282815282916102dc916001600160a01b0390911690610137565b604080513381526001600160a01b038316602082015281519293507f9ab0a0f620347c84a9fac8819b8b835eac3de8548d7137e8d52a8eedfa6d5a8b929081900390910190a190509056fe50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d6661696c6564a264697066735822122063eec39e1e0be176edae1e7f65d50e7ac69b8e18f498e7941cd3d83d283b958064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create()": {
        "returns": {
          "_0": "sponsor A reference to the new proxied sponsor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "Initializes the Factory with an instance of the sponsor",
      "create()": {
        "notice": "Creates a new sponsor as a proxy of the template instance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21301,
        "contract": "contracts/sponsor/SponsorProxyFactory.sol:SponsorProxyFactory",
        "label": "instance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Sponsor)21293"
      }
    ],
    "types": {
      "t_contract(Sponsor)21293": {
        "encoding": "inplace",
        "label": "contract Sponsor",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "179400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "create()": "infinite",
      "deployMinimal(address,bytes)": "infinite",
      "instance()": "1015"
    }
  }
}