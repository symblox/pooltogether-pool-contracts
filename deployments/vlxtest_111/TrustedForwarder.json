{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "domainValue",
          "type": "bytes"
        }
      ],
      "name": "DomainRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "typeStr",
          "type": "string"
        }
      ],
      "name": "RequestTypeRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GENERIC_PARAMS",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        }
      ],
      "name": "_getEncoded",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "registerDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "typeSuffix",
          "type": "string"
        }
      ],
      "name": "registerRequestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "typeHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x0E97a61Eca9048bFABFe663727fb759474264277",
    "contractAddress": "0x53a3863E36E1ddc2eAB08278fCac404AaA18FD53",
    "transactionIndex": 1,
    "gasUsed": "1047832",
    "logsBloom": "0x
    "blockHash": "0xcd3683909cbed99599b1147f9a830dfda09693c4f8acc5704d105721c68fdba8",
    "transactionHash": "0x0001436fb37fdc43c416dd048b558b10540e21cc878ba07b6cd55c871ec94b1f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1894000,
        "transactionHash": "0x0001436fb37fdc43c416dd048b558b10540e21cc878ba07b6cd55c871ec94b1f",
        "address": "0x53a3863E36E1ddc2eAB08278fCac404AaA18FD53",
        "topics": [
          "0x64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202",
          "0xdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e48"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005a466f72776172645265717565737428616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c6279746573206461746129000000000000",
        "logIndex": 0,
        "blockHash": "0xcd3683909cbed99599b1147f9a830dfda09693c4f8acc5704d105721c68fdba8"
      }
    ],
    "blockNumber": 1894000,
    "cumulativeGasUsed": "1254199",
    "status": 1,
    "byzantium": true
  },
  "address": "0x53a3863E36E1ddc2eAB08278fCac404AaA18FD53",
  "args": [],
  "solcInputHash": "0xb92888967269cdd4c0dffa1cdaac4cd05321b37a92f965bdc9d09fb1991ddb7e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"RequestTypeRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENERIC_PARAMS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"}],\"name\":\"_getEncoded\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeSuffix\",\"type\":\"string\"}],\"name\":\"registerRequestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"typeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"params\":{\"name\":\"the domain's display name\",\"version\":\"the domain/protocol version\"}},\"registerRequestType(string,string)\":{\"params\":{\"typeName\":\"- the name of the request type.\",\"typeSuffix\":\"- anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"notice\":\"Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.\"},\"registerRequestType(string,string)\":{\"notice\":\"Register a new Request typehash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/opengsn/TrustedForwarder.sol\":\"TrustedForwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/gsn/contracts/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() public {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _updateNonce(req);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\\n        if ( address(this).balance>0 ) {\\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest memory req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"nonce mismatch\\\");\\n    }\\n\\n    function _updateNonce(ForwardRequest memory req) internal {\\n        nonces[req.from]++;\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n\\n    function _verifySig(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData,\\n        bytes memory sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"unregistered domain separator\\\");\\n        require(typeHashes[requestTypeHash], \\\"unregistered request typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest memory req,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            abi.encode(\\n                req.from,\\n                req.to,\\n                req.value,\\n                req.gas,\\n                req.nonce,\\n                keccak256(req.data)\\n            ),\\n            suffixData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x10b4cbeebab696613fa4123c50db43e8ccc2da031a88638e194777cda792a3cb\",\"license\":\"MIT\"},\"@opengsn/gsn/contracts/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)\\n     *        if it does contain a value, then a comma is added first.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\",\"keccak256\":\"0x253fd0f17ff0a73a96d83570b9d6bdc027b64e3ff0aca19d6c0b621bd5156aee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\",\"license\":\"MIT\"},\"contracts/external/opengsn/TrustedForwarder.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@opengsn/gsn/contracts/forwarder/Forwarder.sol\\\";\\n\\ncontract TrustedForwarder is Forwarder {}\",\"keccak256\":\"0x1c9e7834280dc50c0bcbcda7599c506a00695b0f94b58d0eb5b41e6bccfc686d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060606040518060800160405280604a8152602001620012f2604a9139604051602001620000409190620000c8565b60408051601f1981840301815291905290506200005d8162000064565b5062000174565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290620000bc9085906200010c565b60405180910390a25050565b60006e08cdee4eec2e4c8a4cae2eacae6e85608b1b82528251620000f481600f85016020870162000141565b602960f81b600f939091019283015250601001919050565b60006020825282518060208401526200012d81604085016020870162000141565b601f01601f19169190910160400192915050565b60005b838110156200015e57818101518382015260200162000144565b838111156200016e576000848401525b50505050565b61116e80620001846000396000f3fe6080604052600436106100955760003560e01c8063c3f28abd11610059578063c3f28abd14610168578063c45c26741461017d578063c722f1771461019d578063cdf5735a146101bd578063d9210be5146101de5761009c565b8063066a310c146100a157806321fe98df146100cc5780632d0335ab146100f9578063992d82c3146101265780639c7b4592146101485761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b66101fe565b6040516100c39190610e4b565b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004610adb565b61021a565b6040516100c39190610dd3565b34801561010557600080fd5b50610119610114366004610ab9565b61022f565b6040516100c3919061103c565b34801561013257600080fd5b50610146610141366004610b5c565b61024a565b005b34801561015457600080fd5b50610146610163366004610af3565b6102d2565b34801561017457600080fd5b506100b66103b4565b34801561018957600080fd5b506100b6610198366004610c00565b6103d0565b3480156101a957600080fd5b506100ec6101b8366004610adb565b610445565b6101d06101cb366004610b5c565b61045a565b6040516100c3929190610dde565b3480156101ea57600080fd5b506101466101f9366004610af3565b6105c8565b6040518060800160405280604a815260200161109d604a913981565b60006020819052908152604090205460ff1681565b6001600160a01b031660009081526002602052604090205490565b61025387610697565b6102c987878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506106d692505050565b50505050505050565b600046905060606040518060800160405280605281526020016110e760529139805190602001208686604051610309929190610cd3565b60405180910390208585604051610321929190610cd3565b60405190819003812061033c93929186903090602001610e01565b60408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d8906103a3908590610e4b565b60405180910390a250505050505050565b6040518060800160405280605281526020016110e76052913981565b606082846000015185602001518660400151876060015188608001518960a001518051906020012060405160200161040d96959493929190610d9d565b60408051601f198184030181529082905261042d92918590602001610c96565b60405160208183030381529060405290509392505050565b60016020526000908152604090205460ff1681565b6000606061046789610697565b6104dd89898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152506106d692505050565b6104e6896107b4565b88602001516001600160a01b031689606001518a604001518b60a001518c60000151604051602001610519929190610cff565b60408051601f198184030181529082905261053391610ce3565b600060405180830381858888f193505050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50909250905047156105bc5788516040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156105ba573d6000803e3d6000fd5b505b97509795505050505050565b60005b838110156106425760008585838181106105e157fe5b909101356001600160f81b031916915050600560fb1b81148015906106145750602960f81b6001600160f81b0319821614155b6106395760405162461bcd60e51b815260040161063090610ecc565b60405180910390fd5b506001016105cb565b50606084846040518060800160405280604a815260200161109d604a91398585604051602001610676959493929190610d36565b6040516020818303038152906040529050610690816107d5565b5050505050565b608081015181516001600160a01b0316600090815260026020526040902054146106d35760405162461bcd60e51b815260040161063090610ef6565b50565b60008481526001602052604090205460ff166107045760405162461bcd60e51b815260040161063090610f97565b60008381526020819052604090205460ff166107325760405162461bcd60e51b815260040161063090610f60565b6000846107408786866103d0565b8051602091820120604051610756939201610d82565b60408051601f19818403018152919052805160209091012086519091506001600160a01b03166107868284610837565b6001600160a01b0316146107ac5760405162461bcd60e51b815260040161063090611010565b505050505050565b516001600160a01b0316600090815260026020526040902080546001019055565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb2029061082b908590610e4b565b60405180910390a25050565b6000815160411461085a5760405162461bcd60e51b815260040161063090610e95565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156108ac5760405162461bcd60e51b815260040161063090610f1e565b8060ff16601b141580156108c457508060ff16601c14155b156108e15760405162461bcd60e51b815260040161063090610fce565b6000600187838686604051600081526020016040526040516109069493929190610e2d565b6020604051602081039080840390855afa158015610928573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661095b5760405162461bcd60e51b815260040161063090610e5e565b93505050505b92915050565b80356001600160a01b038116811461096157600080fd5b60008083601f84011261098f578182fd5b50813567ffffffffffffffff8111156109a6578182fd5b6020830191508360208285010111156109be57600080fd5b9250929050565b600082601f8301126109d5578081fd5b813567ffffffffffffffff8111156109eb578182fd5b6109fe601f8201601f1916602001611045565b9150808252836020828501011115610a1557600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215610a3f578081fd5b610a4960c0611045565b9050610a558383610967565b8152610a648360208401610967565b602082015260408201356040820152606082013560608201526080820135608082015260a082013567ffffffffffffffff811115610aa157600080fd5b610aad848285016109c5565b60a08301525092915050565b600060208284031215610aca578081fd5b610ad48383610967565b9392505050565b600060208284031215610aec578081fd5b5035919050565b60008060008060408587031215610b08578283fd5b843567ffffffffffffffff80821115610b1f578485fd5b610b2b8883890161097e565b90965094506020870135915080821115610b43578384fd5b50610b508782880161097e565b95989497509550505050565b600080600080600080600060a0888a031215610b76578283fd5b873567ffffffffffffffff80821115610b8d578485fd5b610b998b838c01610a2e565b985060208a0135975060408a0135965060608a0135915080821115610bbc578485fd5b610bc88b838c0161097e565b909650945060808a0135915080821115610be0578384fd5b50610bed8a828b0161097e565b989b979a50959850939692959293505050565b600080600060608486031215610c14578283fd5b833567ffffffffffffffff80821115610c2b578485fd5b610c3787838801610a2e565b9450602086013593506040860135915080821115610c53578283fd5b50610c60868287016109c5565b9150509250925092565b60008151808452610c8281602086016020860161106c565b601f01601f19169290920160200192915050565b60008482528351610cae81602085016020880161106c565b80830190508351610cc681602084016020880161106c565b0160200195945050505050565b6000828483379101908152919050565b60008251610cf581846020870161106c565b9190910192915050565b60008351610d1181846020880161106c565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600085878337600560fb1b8287019081528551610d5a816001840160208a0161106c565b600b60fa1b600192909101918201528385600283013790920160020191825250949350505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b901515815260200190565b6000831515825260406020830152610df96040830184610c6a565b949350505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610ad46020830184610c6a565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526010908201526f696e76616c696420747970656e616d6560801b604082015260600190565b6020808252600e908201526d0dcdedcc6ca40dad2e6dac2e8c6d60931b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601d908201527f756e726567697374657265642072657175657374207479706568617368000000604082015260600190565b6020808252601d908201527f756e7265676973746572656420646f6d61696e20736570617261746f72000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252601290820152710e6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561106457600080fd5b604052919050565b60005b8381101561108757818101518382015260200161106f565b83811115611096576000848401525b5050505056fe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c62797465732064617461454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a264697066735822122062d05459f3efa0dfc74e5f4e9e7ecdc297ba9a5466b8cc8cc817bfddbef58c5364736f6c634300060c0033616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c62797465732064617461",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063c3f28abd11610059578063c3f28abd14610168578063c45c26741461017d578063c722f1771461019d578063cdf5735a146101bd578063d9210be5146101de5761009c565b8063066a310c146100a157806321fe98df146100cc5780632d0335ab146100f9578063992d82c3146101265780639c7b4592146101485761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b66101fe565b6040516100c39190610e4b565b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004610adb565b61021a565b6040516100c39190610dd3565b34801561010557600080fd5b50610119610114366004610ab9565b61022f565b6040516100c3919061103c565b34801561013257600080fd5b50610146610141366004610b5c565b61024a565b005b34801561015457600080fd5b50610146610163366004610af3565b6102d2565b34801561017457600080fd5b506100b66103b4565b34801561018957600080fd5b506100b6610198366004610c00565b6103d0565b3480156101a957600080fd5b506100ec6101b8366004610adb565b610445565b6101d06101cb366004610b5c565b61045a565b6040516100c3929190610dde565b3480156101ea57600080fd5b506101466101f9366004610af3565b6105c8565b6040518060800160405280604a815260200161109d604a913981565b60006020819052908152604090205460ff1681565b6001600160a01b031660009081526002602052604090205490565b61025387610697565b6102c987878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152506106d692505050565b50505050505050565b600046905060606040518060800160405280605281526020016110e760529139805190602001208686604051610309929190610cd3565b60405180910390208585604051610321929190610cd3565b60405190819003812061033c93929186903090602001610e01565b60408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d8906103a3908590610e4b565b60405180910390a250505050505050565b6040518060800160405280605281526020016110e76052913981565b606082846000015185602001518660400151876060015188608001518960a001518051906020012060405160200161040d96959493929190610d9d565b60408051601f198184030181529082905261042d92918590602001610c96565b60405160208183030381529060405290509392505050565b60016020526000908152604090205460ff1681565b6000606061046789610697565b6104dd89898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152506106d692505050565b6104e6896107b4565b88602001516001600160a01b031689606001518a604001518b60a001518c60000151604051602001610519929190610cff565b60408051601f198184030181529082905261053391610ce3565b600060405180830381858888f193505050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50909250905047156105bc5788516040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156105ba573d6000803e3d6000fd5b505b97509795505050505050565b60005b838110156106425760008585838181106105e157fe5b909101356001600160f81b031916915050600560fb1b81148015906106145750602960f81b6001600160f81b0319821614155b6106395760405162461bcd60e51b815260040161063090610ecc565b60405180910390fd5b506001016105cb565b50606084846040518060800160405280604a815260200161109d604a91398585604051602001610676959493929190610d36565b6040516020818303038152906040529050610690816107d5565b5050505050565b608081015181516001600160a01b0316600090815260026020526040902054146106d35760405162461bcd60e51b815260040161063090610ef6565b50565b60008481526001602052604090205460ff166107045760405162461bcd60e51b815260040161063090610f97565b60008381526020819052604090205460ff166107325760405162461bcd60e51b815260040161063090610f60565b6000846107408786866103d0565b8051602091820120604051610756939201610d82565b60408051601f19818403018152919052805160209091012086519091506001600160a01b03166107868284610837565b6001600160a01b0316146107ac5760405162461bcd60e51b815260040161063090611010565b505050505050565b516001600160a01b0316600090815260026020526040902080546001019055565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb2029061082b908590610e4b565b60405180910390a25050565b6000815160411461085a5760405162461bcd60e51b815260040161063090610e95565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156108ac5760405162461bcd60e51b815260040161063090610f1e565b8060ff16601b141580156108c457508060ff16601c14155b156108e15760405162461bcd60e51b815260040161063090610fce565b6000600187838686604051600081526020016040526040516109069493929190610e2d565b6020604051602081039080840390855afa158015610928573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661095b5760405162461bcd60e51b815260040161063090610e5e565b93505050505b92915050565b80356001600160a01b038116811461096157600080fd5b60008083601f84011261098f578182fd5b50813567ffffffffffffffff8111156109a6578182fd5b6020830191508360208285010111156109be57600080fd5b9250929050565b600082601f8301126109d5578081fd5b813567ffffffffffffffff8111156109eb578182fd5b6109fe601f8201601f1916602001611045565b9150808252836020828501011115610a1557600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215610a3f578081fd5b610a4960c0611045565b9050610a558383610967565b8152610a648360208401610967565b602082015260408201356040820152606082013560608201526080820135608082015260a082013567ffffffffffffffff811115610aa157600080fd5b610aad848285016109c5565b60a08301525092915050565b600060208284031215610aca578081fd5b610ad48383610967565b9392505050565b600060208284031215610aec578081fd5b5035919050565b60008060008060408587031215610b08578283fd5b843567ffffffffffffffff80821115610b1f578485fd5b610b2b8883890161097e565b90965094506020870135915080821115610b43578384fd5b50610b508782880161097e565b95989497509550505050565b600080600080600080600060a0888a031215610b76578283fd5b873567ffffffffffffffff80821115610b8d578485fd5b610b998b838c01610a2e565b985060208a0135975060408a0135965060608a0135915080821115610bbc578485fd5b610bc88b838c0161097e565b909650945060808a0135915080821115610be0578384fd5b50610bed8a828b0161097e565b989b979a50959850939692959293505050565b600080600060608486031215610c14578283fd5b833567ffffffffffffffff80821115610c2b578485fd5b610c3787838801610a2e565b9450602086013593506040860135915080821115610c53578283fd5b50610c60868287016109c5565b9150509250925092565b60008151808452610c8281602086016020860161106c565b601f01601f19169290920160200192915050565b60008482528351610cae81602085016020880161106c565b80830190508351610cc681602084016020880161106c565b0160200195945050505050565b6000828483379101908152919050565b60008251610cf581846020870161106c565b9190910192915050565b60008351610d1181846020880161106c565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600085878337600560fb1b8287019081528551610d5a816001840160208a0161106c565b600b60fa1b600192909101918201528385600283013790920160020191825250949350505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b901515815260200190565b6000831515825260406020830152610df96040830184610c6a565b949350505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610ad46020830184610c6a565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526010908201526f696e76616c696420747970656e616d6560801b604082015260600190565b6020808252600e908201526d0dcdedcc6ca40dad2e6dac2e8c6d60931b604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604082015261756560f01b606082015260800190565b6020808252601d908201527f756e726567697374657265642072657175657374207479706568617368000000604082015260600190565b6020808252601d908201527f756e7265676973746572656420646f6d61696e20736570617261746f72000000604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604082015261756560f01b606082015260800190565b6020808252601290820152710e6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561106457600080fd5b604052919050565b60005b8381101561108757818101518382015260200161106f565b83811115611096576000848401525b5050505056fe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c62797465732064617461454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a264697066735822122062d05459f3efa0dfc74e5f4e9e7ecdc297ba9a5466b8cc8cc817bfddbef58c5364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "params": {
          "name": "the domain's display name",
          "version": "the domain/protocol version"
        }
      },
      "registerRequestType(string,string)": {
        "params": {
          "typeName": "- the name of the request type.",
          "typeSuffix": "- anything after the generic params can be empty string (if no extra fields are needed)        if it does contain a value, then a comma is added first."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "notice": "Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value."
      },
      "registerRequestType(string,string)": {
        "notice": "Register a new Request typehash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 91,
        "contract": "contracts/external/opengsn/TrustedForwarder.sol:TrustedForwarder",
        "label": "typeHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 95,
        "contract": "contracts/external/opengsn/TrustedForwarder.sol:TrustedForwarder",
        "label": "domains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 99,
        "contract": "contracts/external/opengsn/TrustedForwarder.sol:TrustedForwarder",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "892400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "EIP712_DOMAIN_TYPE()": "infinite",
      "GENERIC_PARAMS()": "infinite",
      "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)": "infinite",
      "domains(bytes32)": "1227",
      "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)": "infinite",
      "getNonce(address)": "1320",
      "registerDomainSeparator(string,string)": "infinite",
      "registerRequestType(string,string)": "infinite",
      "typeHashes(bytes32)": "1209",
      "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)": "infinite"
    }
  }
}